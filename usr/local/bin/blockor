#!/bin/sh
#
# Copyright (c) 2022-2022, Muktadiur Rahman <muktadiur@gmail.com>
# All rights reserved.

## version
version='0.1.1'

PATH=${PATH}:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

. /usr/local/etc/blockor.conf

blockor_usage() {
    cat << EOF
Blockor protects FreeBSD, OpenBSD servers from brute-force attacks.
Usage:
  blockor command [args]
Available Commands:
  check         Check blockor.conf file and show config for /etc/pf.conf.
  start         Start the blockord daemon.
  stop          Stop the blockord daemon.
  add           Add IP to blocked list.
  remove        Remove IP from blocked list.
  flush         Remove all entries from blocked list.
  list          Show blocked list with the failed count.
  status        Running or Stopped.
Use "blockor -v|--version" for version information.
EOF
    exit 1
}

permission_check() {
    if [ $(id -u) -ne 0 ]; then
        echo "blockor(permission denied). root|doas|sudo required"
        exit 1
    fi
}

blockor_version() {
    echo "blockor(${version})"
    exit 0
}

blockor_check() {
    blockor_conf="/usr/local/etc/blockor.conf"
    if [ ! -r $blockor_conf ]; then
        echo "blockor($blockor_conf not found)"
        echo "example: /usr/local/share/examples/blockor/blockor.example.conf"
        exit 1
    fi
    echo "blockor(ok)"
    cat <<EOF
Add these two lines to /etc/pf.conf (if not done already):
table <blockor> persist
block drop in quick on egress from <blockor> to any
EOF
exit 0
}

blockor_start() {
    if [ $(ps ax | awk '/libexec/ && /blockord.sh/' | grep -v awk | wc -l) -gt 0 ]; then
        echo 'blockord(already running)'
        exit 1
    fi
    nohup $blockord > $blockor_log_file &
    echo 'blockord(ok)'
    exit 0
}

blockor_stop() {
    ps ax | awk '/libexec/ && /blockord.sh/' | grep -v awk |  awk '{print $1}' | xargs kill -9
    ps ax | awk '/tail -n 0 -f/ && /auth.?log/' | grep -v awk | awk '{print $1}' | xargs kill -9
    echo 'blockord(stopped)'
    exit 0
}

blockor_add() {
    IP=$(echo ${1} | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
    check_whitelisted $IP
    if [ ! -z $IP ]; then
        pfctl -t blockor -q -T add $IP
    fi
}

check_whitelisted() {
    for white_ip in $(echo $blockor_whitelist); do
        if [ ${1} == "${white_ip}" ]; then
            echo 'blockor(whitelisted. skipped.' $white_ip')'
        fi
    done
}

blockor_remove() {
    IP=$(echo ${1} | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
    if [ ! -z $IP ]; then
        pfctl -t blockor -q -T delete $IP
        os=$(uname -sr | awk '{print $1}')
        if [ $os == 'OpenBSD' ]; then
            sed -i '/'"${IP}"'$/d' $blockor_file
        else
            sed -i '' '/'"${IP}"'$/d' $blockor_file
        fi
    fi
}

blockor_flush() {
    pfctl -t blockor -q -T flush
    cat /dev/null > $blockor_file
    echo 'blockor(flushed)'
    exit 0
}

blockor_list() {
    total=$(pfctl -t blockor -T show | wc -l)
    echo 'Total' $total 'IP(s) blocked'
    pfctl -t blockor -T show

    if [ ! -f $blockor_file ]; then
        exit 1
    fi

    echo "count  IP"
    cat $blockor_file | sort | uniq -c | sort -nr
    exit 0
}

blockor_status() {
    if [ $(ps ax | awk '/libexec/ && /blockord.sh/' | grep -v awk | wc -l) -gt 0 ]; then
        echo 'blockord(running)'
    else
        echo 'blockord(stopped)'
    fi
    exit 0
}

is_valid_ip() {
    IP=$(echo ${1} | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
    if [ -z $IP ]; then
        echo 'blockor(invalid IP)'
        exit 1
    fi
}

[ $# -lt 1 ] && usage

CMD=$1
shift

case ${CMD} in
version|-v|--version)
    blockor_version
    ;;
help|-h|--help)
    blockor_usage
    ;;
check|--check)
    permission_check
    blockor_check
    ;;
start|--start)
    permission_check
    blockor_start
    ;;
stop|--stop)
    permission_check
    blockor_stop
    ;;
add|-a|--add)
    permission_check
    is_valid_ip $1
    while [ ! -z $1 ]; do
        blockor_add $1
        shift
    done
    echo 'blockor(added)'
    exit 0
    ;;
remove|-r|--remove)
    permission_check
    is_valid_ip $1
    while [ ! -z $1 ]; do
        blockor_remove $1
        shift
    done
    echo 'blockor(removed)'
    exit 0
    ;;
flush|-f|--flush)
    permission_check
    blockor_flush
    ;;
list|-l|--list)
    permission_check
    blockor_list
    ;;
status|-s|--status)
    permission_check
    blockor_status
    ;;
*)
    blockor_usage
    ;;
esac
